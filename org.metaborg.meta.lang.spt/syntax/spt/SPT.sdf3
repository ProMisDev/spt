module spt/SPT

imports spt/Common
imports spt/ATerm

context-free start-symbols TestSuite

context-free syntax
  TestSuite.TestSuite = <
    <{Header "\n"}*>
    <{TestDecl "\n\n"}*>
  >

  Header.Name = <module <MODULE>>
  // the start symbol is not supported yet by the SPT implementation
  Header.StartSymbol = <start symbol <ID>>
  Header.Language = <language <LANG>>

  TestDecl.Test2 = <
    test <Description> <OpenMarker2>
      <Fragment2>
    <CloseMarker2>
    <{Expectation "\n"}*>
  >
  
  TestDecl.Test3 = <
    test <Description> <OpenMarker3>
      <Fragment3>
    <CloseMarker3>
    <{Expectation "\n"}*>
  >
  
  TestDecl.Test4 = <
    test <Description> <OpenMarker4>
      <Fragment4>
    <CloseMarker4>
    <{Expectation "\n"}*>
  >
  
  // for now we only have brackets as markers
  OpenMarker2 = OpenBracket2
  OpenMarker3 = OpenBracket3
  OpenMarker4 = OpenBracket4
  CloseMarker2 = CloseBracket2
  CloseMarker3 = CloseBracket3
  CloseMarker4 = CloseBracket4
  
  Fragment2.Fragment = <<StringPart2><TailPart2>>
  Fragment3.Fragment = <<StringPart3><TailPart3>>
  Fragment4.Fragment = <<StringPart4><TailPart4>>
  
  TailPart2.Done = <>
  TailPart2.More = <<Selection2><StringPart2><TailPart2>>
  TailPart3.Done = <>
  TailPart3.More = <<Selection3><StringPart3><TailPart3>>
  TailPart4.Done = <>
  TailPart4.More = <<Selection4><StringPart4><TailPart4>>
  
  Selection2.Selection = <<OpenBracket2><StringPart2><CloseBracket2>>
  Selection3.Selection = <<OpenBracket3><StringPart3><CloseBracket3>>
  Selection4.Selection = <<OpenBracket4><StringPart4><CloseBracket4>>
  
  // Expectations

  // a term for the 'to' part that many expectations use
  ToPart.ToPart2 = <
    to <LANG> <OpenMarker2>
      <Fragment2>
    <CloseMarker2>
  >
  ToPart.ToPart3 = <
    to <LANG> <OpenMarker3>
      <Fragment3>
    <CloseMarker3>
  >
  ToPart.ToPart4 = <
    to <LANG> <OpenMarker4>
      <Fragment4>
    <CloseMarker4>
  >
  // to ATerm:
  ToAterm.ToAterm = <to <ATerm>>
  
  // parse expectations 
  Expectation.ParseSucceeds = <parse succeeds>
  Expectation.ParseFails = <parse fails>
  Expectation.ParseTo = <parse <ToPart>>
  Expectation.ParseToAterm = <parse <ToAterm>>
  
  // analysis expectations
  Expectation.Errors = <<INT> errors>
  Expectation.OneError = <1 error>
  Expectation.Warnings = <<INT> warnings>
  Expectation.OneWarning = <1 warning>
  Expectation.Notes = <<INT> notes>
  Expectation.OneNote = <1 note>
  
  // reference resolution expectations
  Expectation.Resolve = <resolve #<INT>>
  Expectation.ResolveTo = <resolve #<INT> to #<INT>>

  // origin expectations
  Expectation.HasOrigin = <has origin locations>
  
  // running stratego strategies expectations
  Expectation.Run = <run <STRAT>>
  Expectation.RunTo = <run <STRAT> <ToPart>>
  Expectation.RunToAterm = <run <STRAT> <ToAterm>>
  
  // transformations
  Expectation.Transform = <transform <STRING> <ToPart>>
  Expectation.TransformToAterm = <transform <STRING> <ToAterm>>

lexical syntax
  // NOTE: everything until the opening marker or newline is the description 
  // update this when a new type of opening marker is introduced
  Description = (~[\n\r\[])+
  
  OpenBracket1 = "["
  OpenBracket2 = "[["
  OpenBracket3 = "[[["
  OpenBracket4 = "[[[["
  CloseBracket1 = "]"
  CloseBracket2 = "]]"
  CloseBracket3 = "]]]"
  CloseBracket4 = "]]]]"
  
  // everything that isn't a [[ or ]] (or more brackets) will be a stringpart2
  // update these when a new type of opening or closing marker is introduced
  StringPart2 = (~[\[\]] | OpenBracket1 | CloseBracket1)*
  StringPart3 = (~[\[] | OpenBracket1 | CloseBracket1 | OpenBracket2 | CloseBracket2)*
  StringPart4 = (~[\[] | OpenBracket1 | CloseBracket1 | OpenBracket2 | CloseBracket2 | OpenBracket3 | CloseBracket3)*

lexical restrictions  
  // NOTE: everything until the opening marker or newline is the description
  // update this when a new opening marker is introduced
  Description -/- [\ \t]
  
  // update these when a new opening or closing marker is introduced
  OpenBracket1 -/- [\[]
  OpenBracket2 -/- [\[]
  OpenBracket3 -/- [\[]
  OpenBracket4 -/- [\[]
  CloseBracket1 -/- [\]]
  CloseBracket2 -/- [\]]
  CloseBracket3 -/- [\]]
  CloseBracket4 -/- [\]]
  
  // NOTE: everything until the marker is part of the StringPart of a fragment
  // update these when a new opening or closing marker is introduced
  StringPart2 -/- ~[\[\]]
  StringPart3 -/- ~[\[\]]
  StringPart4 -/- ~[\[\]]
  
  