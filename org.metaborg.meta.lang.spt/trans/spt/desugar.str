module spt/desugar

imports
  signatures/spt/-

signature constructors
  // Test(description, open_marker, fragment, close_marker, expectations)
  Test : String * String * Fragment * String * List -> Test
  // ParseTo(language_name, open_marker, fragment, close_marker)
  ToPart : String * String * Fragment * String -> ParseTo

rules
  desugar-before = topdown(try(desugar-term-before))
  
  // Desugar Test
  desugar-term-before:
    cons#([description, open_marker, fragment, close_marker, exps]) -> Test(description, open_marker, fragment, close_marker, exps)
    where
      <eq> (cons, "Test2") + <eq> (cons, "Test3") + <eq> (cons, "Test4")
  
  // Desugar ToPart
  desugar-term-before:
    cons#([lang_name, open_marker, fragment, close_marker]) -> ToPart(lang_name, open_marker, fragment, close_marker)
    where
      <eq> (cons, "ToPart2") + <eq> (cons, "ToPart3") + <eq> (cons, "ToPart4")
      
  // Desugar the One(Error | Warning | Note) constructors
  desugar-term-before:
    OneError() -> Errors(1)
  desugar-term-before:
    OneWarning() -> Warnings(1)
  desugar-term-before:
    OneNote() -> Notes(1)
    
  // Desugar from a string to an int inside Errors|Warnings|Notes
  desugar-term-before:
    cons#([n]) -> cons#([i])
    where
      <eq> (cons, "Warnings") + <eq> (cons, "Errors") + <eq> (cons, "Notes")
      with
        i := <dec-string-to-int> n
        
  // Desugar from a string to an int inside Resolve|ResolveTo
  desugar-term-before:
    Resolve(n) -> Resolve(i)
    with
      i := <dec-string-to-int> n

  desugar-term-before:
    ResolveTo(x,y) -> ResolveTo(i, j)
    with
      i := <dec-string-to-int> x;
      j := <dec-string-to-int> y
      
  // Desugar our ATerms
  desugar-term-before:
    Anno(term, annos) -> term{annos}

  desugar-term-before:
    Appl(cons, children) -> cons#(children)

  desugar-term-before:
    List(l) -> l
    
  desugar-term-before:
    Int(n) -> <dec-string-to-int> n
    
  desugar-term-before:
    String(s) -> <un-double-quote> s